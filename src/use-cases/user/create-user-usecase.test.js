import { EmailAlreadyInUseError } from '../../errors/user.js'
import { user } from '../../tests/index.js'
import { CreateUserUseCase } from './create-user.js'

describe('CreateUserUseCase', () => {
    class getUserByEmailRepositoryStub {
        async execute() {
            return null
        }
    }

    class createUserRepositoryStub {
        async execute() {
            return user
        }
    }

    class passwordHasherAdapterStub {
        async execute() {
            return 'hashed-password'
        }
    }

    class idGeneratorAdapterStub {
        execute() {
            return 'generated-id'
        }
    }

    class tokenGeneratorAdapterStub {
        generate() {
            return {
                accessToken: 'generated-access-token',
                refreshToken: 'generated-refresh-token',
            }
        }
    }

    const makSut = () => {
        const getUserByEmailRepository = new getUserByEmailRepositoryStub()
        const createUserRepository = new createUserRepositoryStub()
        const passwordHasherAdapter = new passwordHasherAdapterStub()
        const idGeneratorAdapter = new idGeneratorAdapterStub()
        const tokenGeneratorAdapter = new tokenGeneratorAdapterStub()

        const sut = new CreateUserUseCase(
            getUserByEmailRepository,
            createUserRepository,
            passwordHasherAdapter,
            idGeneratorAdapter,
            tokenGeneratorAdapter,
        )

        return {
            sut,
            getUserByEmailRepository,
            createUserRepository,
            passwordHasherAdapter,
            idGeneratorAdapter,
            tokenGeneratorAdapter,
        }
    }

    it('should creating user on successfully', async () => {
        const { sut } = makSut()

        const createdUser = await sut.execute({
            first_name: user.name,
            last_name: user.last_name,
            email: user.email,
            password: user.password,
        })

        expect(createdUser).toBeTruthy()
        expect(createdUser.tokens.accessToken).toBeDefined()
        expect(createdUser.tokens.refreshToken).toBeDefined()
    })

    it('should throw email already in use', async () => {
        const { sut, getUserByEmailRepository } = makSut()

        import.meta.jest
            .spyOn(getUserByEmailRepository, 'execute')
            .mockResolvedValueOnce(user)

        const promise = sut.execute(user)

        await expect(promise).rejects.toThrow(
            new EmailAlreadyInUseError(user.email),
        )
    })

    it('should throw if getUserByEmailRepository throws', async () => {
        const { sut, getUserByEmailRepository } = makSut()

        import.meta.jest
            .spyOn(getUserByEmailRepository, 'execute')
            .mockRejectedValueOnce(new Error())

        const promise = sut.execute(user)

        await expect(promise).rejects.toThrow()
    })

    it('ensure that the id is generated by the idGeneratorAdapter', async () => {
        const { sut, idGeneratorAdapter, createUserRepository } = makSut()
        const idGenerateSpy = import.meta.jest.spyOn(
            idGeneratorAdapter,
            'execute',
        )
        const createUserRepositorySpy = import.meta.jest.spyOn(
            createUserRepository,
            'execute',
        )

        await sut.execute(user)

        expect(idGenerateSpy).toHaveBeenCalled()
        expect(createUserRepositorySpy).toHaveBeenCalledWith({
            ...user,
            id: 'generated-id',
            password: 'hashed-password',
        })
    })

    it('should throw if idGeneratorAdapter throws', async () => {
        const { sut, idGeneratorAdapter } = makSut()

        import.meta.jest
            .spyOn(idGeneratorAdapter, 'execute')
            .mockImplementationOnce(() => {
                throw new Error()
            })

        const promise = sut.execute(user)

        await expect(promise).rejects.toThrow()
    })

    it('ensure that the password hash is generated by the passwordHasherAdapter', async () => {
        const { sut, passwordHasherAdapter, createUserRepository } = makSut()
        const passwordHasherAdapterSpy = import.meta.jest.spyOn(
            passwordHasherAdapter,
            'execute',
        )
        const createUserRepositorySpy = import.meta.jest.spyOn(
            createUserRepository,
            'execute',
        )

        await sut.execute(user)

        expect(passwordHasherAdapterSpy).toHaveBeenCalledWith(user.password)
        expect(createUserRepositorySpy).toHaveBeenCalledWith({
            ...user,
            id: 'generated-id',
            password: 'hashed-password',
        })
    })

    it('should throw if passwordHasherAdapter throws', async () => {
        const { sut, passwordHasherAdapter } = makSut()

        import.meta.jest
            .spyOn(passwordHasherAdapter, 'execute')
            .mockRejectedValueOnce(new Error())

        const promise = sut.execute(user)

        await expect(promise).rejects.toThrow()
    })

    it('should throw if createUserRepository throws', async () => {
        const { sut, createUserRepository } = makSut()

        import.meta.jest
            .spyOn(createUserRepository, 'execute')
            .mockRejectedValueOnce(new Error())

        const promise = sut.execute(user)

        await expect(promise).rejects.toThrow()
    })
})
